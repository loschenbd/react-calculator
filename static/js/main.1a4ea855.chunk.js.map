{"version":3,"sources":["components/buttons/numButtons.js","components/buttons/ClearButton.js","components/buttons/EvalButton.js","components/buttons/OperatorButtons.js","components/display/Display.js","App.js","serviceWorker.js","index.js"],"names":["numValues","id","value","NumButtons","props","map","button","className","key","onClick","handleClick","ClearButton","handleClear","children","EvalButton","handleEvaluate","opValues","OperatorButtons","Display","display","prevNumber","currentNumber","stack","App","clear","console","log","setState","decimal","operator","concatNumber","number","state","concatOperator","substring","length","evaluate","math","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a4ea855.chunk.js","sourcesContent":["import React from 'react';\n\nconst numValues = [\n  { id: \"seven\", value: \"7\" },\n  { id: \"eight\", value: \"8\" },\n  { id: \"nine\", value: \"9\" },\n  { id: \"four\", value: \"4\" },\n  { id: \"five\", value: \"5\" },\n  { id: \"six\", value: \"6\" },\n  { id: \"one\", value: \"1\" },\n  { id: \"two\", value: \"2\" },\n  { id: \"three\", value: \"3\" },\n  { id: \"zero\", value: \"0\" },\n  { id: \"decimal\", value: \".\"}\n];\n\n  const NumButtons = (props) => numValues.map((button) => {\n    return  (\n      <button\n        className=\"num-button\"\n        id={button.id}\n        key={button.id}\n        onClick={() => props.handleClick(button.value)}>\n        {button.value}\n\n      </button>\n    )\n  })\n\n\nexport default NumButtons;","import React from \"react\";\n\nconst ClearButton = (props) => {\n  return (\n  <button\n    onClick={props.handleClear}\n    id=\"clear\">\n    {props.children}\n  </button>\n  )\n};\n\nexport default ClearButton","import React from 'react';\n\nconst EvalButton = (props) => {\n  return (\n    <div>\n      <button\n        onClick={props.handleEvaluate}\n        id=\"equals\">\n        {props.children}\n      </button>\n    </div>\n  );\n};\n\nexport default EvalButton;\n","import React from \"react\";\n\nconst opValues = [\n  { id: \"add\", value: \"+\" },\n  { id: \"subtract\", value: \"-\" },\n  { id: \"multiply\", value: \"*\" },\n  { id: \"divide\", value: \"/\" },\n];\n\nconst OperatorButtons = (props) => opValues.map((button) => {\n  return (\n    <button\n      className=\"op-button\"\n      id={button.id}\n      key={button.id}\n      onClick={() => props.handleClick(button.value)}>\n\n      {button.value}\n    </button>\n  )\n})\n\nexport default OperatorButtons","import React from 'react';\n\nconst Display = (props) => {\n  return (\n    <div>\n      <span id=\"display\" className=\"current-number\">{props.display}</span>\n      <span className=\"prev-number\">{props.prevNumber}</span>\n      <span className=\"current-number\">{props.currentNumber}</span>\n      <span className=\"stack\">{props.stack}</span>\n    </div>\n  );\n};\n\nexport default Display;\n","import React, {Component} from 'react';\nimport './App.css';\nimport './components/display/display.css'\nimport './components/buttons/buttons.css'\nimport * as math from 'mathjs';\n\nimport NumButtons from \"./components/buttons/numButtons\"\nimport ClearButton from \"./components/buttons/ClearButton\"\nimport EvalButton from \"./components/buttons/EvalButton\"\nimport OperatorButtons from \"./components/buttons/OperatorButtons\"\nimport Display from \"./components/display/Display\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: 0,\n      decimal: false,\n      operator: false\n    }\n  }\n\n  clear = () => {\n    console.log(\"clear\");\n    this.setState({\n      display: 0,\n      decimal: false,\n      operator: false\n    });\n  };\n\nconcatNumber = (number) => {\n  if (this.state.display === 0 && number === \"0\") {\n    return;\n  }\n  if (number !== \".\" && this.state.display === 0) {\n    this.setState({\n      display: number,\n      operator: false\n    });\n  } else if (number !== \".\" && number !== 0) {\n    this.setState({\n      display: this.state.display + number,\n      operator: false\n    });\n  }\n\n    else if (number === \".\" && this.state.decimal === true) {\n      return;\n  } else { this.setState({\n    operator: false,\n    decimal: true,\n    display: this.state.display + number\n  })\n}\n  console.log(this.state.display + number);\n};\n\nconcatOperator = (operator) => {\n  if (this.state.operator === true && operator !== \"-\") {\n    this.setState({\n      display: this.state.display.substring(0, this.state.display.length -1) + operator\n    })\n    console.log(\"cannot have consecutive operators\");\n  } else if (operator === \"-\") {\n    this.setState({\n      display: this.state.display + operator,\n      operator: false,\n      decimal: false\n    })\n  } else {\n    this.setState({\n      display: this.state.display + operator,\n      decimal: false,\n      operator: true\n    });\n  }\n};\n\n\nevaluate = () => {\n  if (this.state.operator === true) {\n    return console.log(\"cannot end input with an operator\");\n  } else {\n    this.setState({display: math.evaluate(this.state.display)});\n  }\n};\n  render() {\n    return (\n      <div className=\"App\">\n        <Display\n          display={this.state.display}\n\n        />\n        <div className=\"button-container\">\n          <div className=\"num-container\">\n            <NumButtons handleClick={this.concatNumber}/>\n          </div>\n          <div className=\"op-container\">\n            <OperatorButtons handleClick={this.concatOperator}/>\n          </div>\n          <EvalButton handleEvaluate={this.evaluate}>=</EvalButton>\n          <ClearButton handleClear={this.clear}>Clear</ClearButton>\n        </div>\n      </div>\n    );\n  }\n  }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}